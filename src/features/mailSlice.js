import {  createSlice } from '@reduxjs/toolkit';

export const mailSlice = createSlice({
  name: 'mail',
  initialState:{
    selectedMail:null,
    sendMessageisOpen:false,
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    selectMail:(state,action)=>{
      state.selectedMail=action.payload;
    },
    openSendMessage: (state) => {
     
      state.sendMessageisOpen=true;
    },
    closeSendMessage: (state) => {
      state.sendMessageisOpen = false;
    },
  
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

});

export const { openSendMessage, closeSendMessage,selectMail } = mailSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSendMessageisOpen = (state) => state.mail.sendMessageisOpen;
export const selectOpenMail=(state)=>state.mail.selectedMail;
// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default mailSlice.reducer;
